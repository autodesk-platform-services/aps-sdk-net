using Autodesk.ModelDerivative.Http;
using Autodesk.ModelDerivative.Model;
using System.Net.Http;


namespace Autodesk.ModelDerivative
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ModelDerivativeClient
    {

        public IDerivativesApi DerivativesApi { get; }
        public IInformationalApi InformationalApi { get; }
        public IJobsApi JobsApi { get; }
        public IManifestApi ManifestApi { get; }
        public IMetadataApi MetadataApi { get; }
        public IThumbnailsApi ThumbnailsApi { get; }
        public ModelDerivativeClient(SDKManager.SDKManager sdkManager)
        {
            this.DerivativesApi = new DerivativesApi(sdkManager);
            this.InformationalApi = new InformationalApi(sdkManager);
            this.JobsApi = new JobsApi(sdkManager);
            this.ManifestApi = new ManifestApi(sdkManager);
            this.MetadataApi = new MetadataApi(sdkManager);
            this.ThumbnailsApi = new ThumbnailsApi(sdkManager);
        }

        #region Informational
        /// <summary>
        /// List Supported Formats
        /// </summary>
        /// <remarks>
        /// Returns an up-to-date list of supported translations. You can use to this list to find out what derivatives are supported by each source file type. You can set options to return the list of supported translations only if they have been updated since a specified date.  See the &#x60;Supported Translation Formats table &lt;/en/docs/model-derivative/v2/overview/supported-translations&gt;&#x60;_ for more details about supported translations.  **Note:** We keep adding new file formats to our supported translations list, constantly.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Specifies a date in the &#x60;&#x60;Day of the week, DD Month YYYY HH:MM:SS GMT&#x60;&#x60; format. The response will contain only the formats modified since the specified date and time. If you specify an invalid date, the response will contain all supported formats. If no changes have been made after the specified date, the service returns HTTP status &#x60;&#x60;304&#x60;&#x60;, NOT MODIFIED. (optional)</param>/// <param name="acceptEncoding">A comma separated list of the algorthms you want the response to be encoded in, specified in the order of preference.    If you specify &#x60;&#x60;gzip&#x60;&#x60; or &#x60;&#x60;*&#x60;&#x60;, the service uses the GZIP algorithm to encode the response.  (optional)</param>
        /// <returns>Task of ApiResponse&#60;Formats&#62;</returns>
        public async System.Threading.Tasks.Task<Formats> GetFormatsAsync(string ifModifiedSince = default, string acceptEncoding = default, string accessToken = null, bool throwOnError = true)
        {

            var response = await this.InformationalApi.GetFormatsAsync(ifModifiedSince, acceptEncoding, accessToken, throwOnError);
            return response.Content;

        }
        #endregion Informational

        #region Jobs
        /// <summary>
        /// Start Translation Job
        /// </summary>
        /// <remarks>
        /// You can use this endpoint to do the following:  Translate a design from one format to another format. Extract selected parts of a design and export the set of geometries in OBJ format. Generate different-sized thumbnails.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="xAdsForce">true: force retrieve the object tree even though it failed to be retrieved or got timeout (got 404 with error message) previously. false (default): retrieve the object tree, and previously failures are not replaced. (optional)</param>
        /// <param name="xAdsDerivativeFormat">Specifies what Object IDs to return, if the design has legacy SVF derivatives generated by the BIM Docs service. Possible values are:  - latest - (Default) Return SVF2 Object IDs. - fallback - Return SVF Object IDs.  Note  1. This parameter applies only to designs with legacy SVF derivatives generated by the BIM 360 Docs service. 2. The BIM 360 Docs service now generates SVF2 derivatives. SVF2 Object IDs may not be compatible with the SVF Object IDs previously generated by the BIM 360 Docs service. Setting this header to fallback may resolve backward compatibility issues resulting from Object IDs of legacy SVF derivatives being retained on the client side. 3. If you use this header with one derivative (URN), you must use it consistently across the following endpoints, whenever you reference the same derivative. - POST job (for OBJ output) - GET {urn}/metadata/{modelGuid} - GET {urn}/metadata/{modelGuid}/properties (optional)</param>
        /// <param name="jobPayload"> (optional)</param>
        /// <returns>Task of ApiResponse&#60;Job&#62;</returns>
        public async System.Threading.Tasks.Task<Job> StartJobAsync(bool xAdsForce = default, XAdsDerivativeFormat xAdsDerivativeFormat = default, JobPayload jobPayload = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.JobsApi.StartJobAsync( xAdsForce, xAdsDerivativeFormat, jobPayload, accessToken, throwOnError);
            return response.Content;
        }

        /// <summary>
        /// Specify References
        /// </summary>
        /// <remarks>
        /// To create references for a composite design in Model Derivative. The description of references is stored in Model Derivative. To use it with the POST job endpoint, you need to set checkReferences to true.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>/// <param name="referencesPayload"> (optional)</param>
        /// <returns>Task of ApiResponse&#60;SpecifyReferences&#62;</returns>
        public async System.Threading.Tasks.Task<SpecifyReferences> SpecifyReferencesAsync (string urn,ReferencesPayload referencesPayload = default, string accessToken = null, bool throwOnError = true)
        {
            var response =  await this.JobsApi.SpecifyReferencesAsync(urn, referencesPayload,accessToken,throwOnError);
            return response.Content;
        }
        #endregion Jobs

        #region Manifest
        /// <summary>
        /// Fetch Manifest
        /// </summary>
        /// <remarks>
        /// Retrieves the manifest for the source design specified by the urn URI parameter. The manifest is a list containing information about the derivatives generated while translating a source file. The manifest contains information such as the URNs of the derivatives, the translation status of each derivative, and much more.  The URNs of the derivatives are used to download the generated derivatives by calling the GET /{urn}/manifest/{derivativeurn} endpoint.  Note: You cannot download 3D SVF2 derivatives.  The statuses are used to check whether the translation of the requested output files is complete. The output files produced by a translation job may complete at different times. Therefore, each output file can have a different status.  The first time you translate a source design, the Model Derivative service creates a manifest for that source design. Thereafter, every time you translate that source design, the Model Derivative service updates that manifest. It does not create a new manifest each time you initiate a translation job, even if you are translating to a different format.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>
        /// <param name="acceptEncoding">A comma separated list of the algorthms you want the response to be encoded in, specified in the order of preference.    If you specify &#x60;&#x60;gzip&#x60;&#x60; or &#x60;&#x60;*&#x60;&#x60;, the service uses the GZIP algorithm to encode the response.  (optional)</param>
        /// <returns>Task of ApiResponse&#60;Manifest&#62;</returns>
        public async System.Threading.Tasks.Task<Manifest> GetManifestAsync(string urn, Region region = default, string acceptEncoding = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.ManifestApi.GetManifestAsync(urn, region, acceptEncoding, accessToken, throwOnError);
            return response.Content;
        }

        /// <summary>
        /// Deletes the manifest and all its translated output files (derivatives). However, it does not delete the design source file.
        /// </summary>
        /// <remarks>
        /// Deletes the manifest and all its translated output files (derivatives). However, it does not delete the design source file. 
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>
        /// <returns>Task of ApiResponse&#60;DeleteManifest&#62;</returns>
        public async System.Threading.Tasks.Task<DeleteManifest> DeleteManifestAsync (string urn, Region region = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.ManifestApi.DeleteManifestAsync(urn,region,accessToken,throwOnError);
            return response.Content;
        }

        #endregion Manifest


        #region Derivatives
        /// <summary>
        /// Fetch Derivative Download URL
        /// </summary>
        /// <remarks>
        /// Returns a download URL and a set of signed cookies, which lets you securely download the derivative specified by the &#x60;derivativeUrn&#x60; URI parameter. The signed cookies have a lifetime of 6 hours. Although you cannot use range headers for this endpoint, you can use range headers for the returned download URL to download the derivative in chunks, in parallel.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="derivativeUrn">The URL-encoded URN of the derivatives. The URN is retrieved from the GET {urn}/manifest endpoint.</param>/// <param name="urn">The Base64 (URL Safe) encoded design URN</param>/// <param name="minutesExpiration">Specifies how many minutes the signed cookies should remain valid. Default value is 360 minutes. The value you specify must be lower than the default value for this parameter. If you specify a value greater than the default value, the Model Derivative service will return an error with an HTTP status code of 400. (optional)</param>/// <param name="responseContentDisposition">The value that must be returned with the download URL as the response-content-disposition query string parameter. Must begin with attachment. This value defaults to the default value corresponding to the derivative/file. (optional)</param>
        /// <returns>Task of ApiResponse&#60;DerivativeDownload&#62;</returns>
        public async System.Threading.Tasks.Task<DerivativeDownload> GetDerivativeUrlAsync(string derivativeUrn, string urn, Region region = default, int minutesExpiration = default, string responseContentDisposition = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.DerivativesApi.GetDerivativeUrlAsync(derivativeUrn, urn, region, minutesExpiration, responseContentDisposition, accessToken, throwOnError);
            return response.Content;
        }

        /// <summary>
        /// Check Derivative Details
        /// </summary>
        /// <remarks>
        /// Returns information about the specified derivative.  This endpoint returns a set of headers similar to that returned by the Get Derivative endpoint.  You can use this endpoint to determine the total content length of a derivative before you download it using the Get Derivative endpoint. If the derivative is large, you can choose to download the derivative in chunks, by specifying a chunk size using the Range header parameter.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>/// <param name="derivativeUrn">The URL-encoded URN of the derivatives. The URN is retrieved from the GET {urn}/manifest endpoint.</param>
        /// <returns>Task of HttpResponseMessage</returns>
        public async System.Threading.Tasks.Task<DerivativeHead> HeadCheckDerivativeAsync(string urn, string derivativeUrn, Region region = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.DerivativesApi.HeadCheckDerivativeAsync(urn, derivativeUrn, region, accessToken, throwOnError);
            if (response.StatusCode == System.Net.HttpStatusCode.Accepted)
                return (new DerivativeHead() { IsProcessing = true });
            return response;

        }
        #endregion Derivatives

        #region Thumbnail
        /// <summary>
        /// Downloads the thumbnail for the source file.
        /// </summary>
        /// <remarks>
        /// Downloads the thumbnail for the source file.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>/// <param name="width">Width of thumbnail  Possible values: 100, 200, 400  If width is omitted, but height is specified, the implicit value for width will match height.  If both width and height are omitted, the server will return a thumbnail closest to a width of 200, if available. (optional)</param>/// <param name="height">Height of thumbnail  Possible values: 100, 200, 400  If height is omitted, but width is specified, the implicit value for height will match width.  If both width and height are omitted, the server will return a thumbnail closest to a width of 200, if available. (optional)</param>
        /// <returns>Task of ApiResponse&#60;System.IO.Stream&#62;</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetThumbnailAsync(string urn, Width width = Width._200, Height height = Height._200, Region region = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.ThumbnailsApi.GetThumbnailAsync(urn, width, height, region, accessToken, throwOnError);
            return response.Content;
        }
        #endregion Thumbnail

        #region MetaData
        /// <summary>
        /// Fetch Object tree
        /// </summary>
        /// <remarks>
        /// Returns a hierarchical list of objects (object tree) in the model view specified by the modelGuid URI parameter.  Before you call this endpoint you must call GET {urn}/metadata to obtain the ID (modelGuid) of the model view you want to get the object tree of.  
        /// 
        /// Most design applications like Fusion 360 and Inventor contain only one model view per design. However, some applications like Revit allow multiple model views (e.g., HVAC, architecture, perspective) per design.  
        /// 
        /// Note You can retrieve metadata only from a design that has been translated to SVF or SVF2. 
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>/// <param name="modelGuid">Unique model view ID. Call GET {urn}/metadata to get the ID</param>/// <param name="acceptEncoding">A comma separated list of the algorthms you want the response to be encoded in, specified in the order of preference.    If you specify &#x60;&#x60;gzip&#x60;&#x60; or &#x60;&#x60;*&#x60;&#x60;, the service uses the GZIP algorithm to encode the response.  (optional)</param>/// <param name="xAdsForce">true: force retrieve the object tree even though it failed to be retrieved or got timeout (got 404 with error message) previously. false (default): retrieve the object tree, and previously failures are not replaced. (optional)</param>/// <param name="xAdsDerivativeFormat">Specifies what Object IDs to return, if the design has legacy SVF derivatives generated by the BIM Docs service. Possible values are:  - latest - (Default) Return SVF2 Object IDs. - fallback - Return SVF Object IDs.  Note  1. This parameter applies only to designs with legacy SVF derivatives generated by the BIM 360 Docs service. 2. The BIM 360 Docs service now generates SVF2 derivatives. SVF2 Object IDs may not be compatible with the SVF Object IDs previously generated by the BIM 360 Docs service. Setting this header to fallback may resolve backward compatibility issues resulting from Object IDs of legacy SVF derivatives being retained on the client side. 3. If you use this header with one derivative (URN), you must use it consistently across the following endpoints, whenever you reference the same derivative. - POST job (for OBJ output) - GET {urn}/metadata/{modelGuid} - GET {urn}/metadata/{modelGuid}/properties (optional)</param>/// <param name="forceget">true: Forcibly gets large resources even if they exceed the expected maximum size (20 MB). If the resource is larger than 800 MB, the server behaves as though forceget is false. In such a case, use the objectid query string parameter to download resources by Object ID one object at a time. Alternatively, you can use POST {urn}/metadata/{modelGuid}/properties:query to fetch only the properties you are interested in. false: (Default) Does not get resources if they exceed the expected maximum size (20 MB). (optional)</param>/// <param name="objectid">If specified, retrieves the sub-tree that has the specified object ID as its parent node. If this parameter is not specified, retrieves the entire object tree. (optional)</param>/// <param name="level">Specifies how many child levels of the hierarchy to return, when the objectid query string parameter is specified. Currently supports only level &#x3D; 1. (optional)</param>
        /// <returns>Task of ApiResponse&#60;ObjectTree&#62;</returns>
        public async System.Threading.Tasks.Task<ModelViews> GetModelViewsAsync(string urn, Region region = default, string acceptEncoding = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.MetadataApi.GetModelViewsAsync(urn, region, acceptEncoding, accessToken, throwOnError);
            return response.Content;
        }
        /// <summary>
        /// Fetch All Properties
        /// </summary>
        /// <remarks>
        /// Returns a list of properties of objects contained in the model view specified by the modelGuid URI parameter. This request returns all properties for all objects by default. However, you can use the objectid query string parameter to return all properties of a specified object.  Properties are returned as a flat list ordered, by their objectid. The objectid is a non-persistent ID assigned to an object when a design file is translated to the SVF or SVF2 format. This means that:  A design file must be translated to SVF or SVF2 before you can retrieve properties. The objectid of an object can change if the design is translated to SVF or SVF2 again. If you require a persistent ID to reference an object, use &#x60;externalId&#x60;.  **Note**: Before you call this endpoint:  Use the &#x60;GET {urn}/metadata&#x60; endpoint. Obtain the ID of the model view (Viewable) you want to check. Use the ID you obtained as the &#x60;modelGuid&#x60; URI parameter.  **Note**: &#x60;POST {urn}/metadata/{modelGuid}/properties:query&#x60; provides greater flexibility to retrieve only the properties you are interested in. What’s more the response is paginated. So, when the number of properties returned is large, it can getz you the results faster.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>
        /// <param name="modelGuid">Unique model view ID. Call GET {urn}/metadata to get the ID</param>
        /// <param name="acceptEncoding">A comma separated list of the algorthms you want the response to be encoded in, specified in the order of preference.    If you specify &#x60;&#x60;gzip&#x60;&#x60; or &#x60;&#x60;*&#x60;&#x60;, the service uses the GZIP algorithm to encode the response.  (optional)</param>
        /// <param name="xAdsForce">true: force retrieve the object tree even though it failed to be retrieved or got timeout (got 404 with error message) previously. false (default): retrieve the object tree, and previously failures are not replaced. (optional)</param>/// <param name="xAdsDerivativeFormat">Specifies what Object IDs to return, if the design has legacy SVF derivatives generated by the BIM Docs service. Possible values are:  - latest - (Default) Return SVF2 Object IDs. - fallback - Return SVF Object IDs.  Note  1. This parameter applies only to designs with legacy SVF derivatives generated by the BIM 360 Docs service. 2. The BIM 360 Docs service now generates SVF2 derivatives. SVF2 Object IDs may not be compatible with the SVF Object IDs previously generated by the BIM 360 Docs service. Setting this header to fallback may resolve backward compatibility issues resulting from Object IDs of legacy SVF derivatives being retained on the client side. 3. If you use this header with one derivative (URN), you must use it consistently across the following endpoints, whenever you reference the same derivative. - POST job (for OBJ output) - GET {urn}/metadata/{modelGuid} - GET {urn}/metadata/{modelGuid}/properties (optional)</param>/// <param name="objectid">he Object ID of the object you want to query properties for.  If objectid is omitted, the server returns properties for all objects. (optional)</param>/// <param name="forceget">true: Forcibly gets large resources even if they exceed the expected maximum size (20 MB). If the resource is larger than 800 MB, the server behaves as though forceget is false. In such a case, use the objectid query string parameter to download resources by Object ID one object at a time. Alternatively, you can use POST {urn}/metadata/{modelGuid}/properties:query to fetch only the properties you are interested in. false: (Default) Does not get resources if they exceed the expected maximum size (20 MB). (optional)</param>
        /// <returns>Task of ApiResponse&#60;AllProperties&#62;</returns>
        public async System.Threading.Tasks.Task<ObjectTree> GetObjectTreeAsync(string urn, string modelGuid, Region region = default, string acceptEncoding = default, bool xAdsForce = default, XAdsDerivativeFormat xAdsDerivativeFormat = default, string forceget = default, int objectid = default, string level = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.MetadataApi.GetObjectTreeAsync(urn, modelGuid, region, acceptEncoding, xAdsForce, xAdsDerivativeFormat, forceget, objectid, level, accessToken, throwOnError);
            if (response.HttpResponse.StatusCode == System.Net.HttpStatusCode.Accepted)
                return (new ObjectTree() { IsProcessing = true });
            return response.Content;
        }

        /// <summary>
        /// Fetch All Properties
        /// </summary>
        /// <remarks>
        /// Returns a list of properties of objects contained in the model view specified by the modelGuid URI parameter. This request returns all properties for all objects by default. However, you can use the objectid query string parameter to return all properties of a specified object.  Properties are returned as a flat list ordered, by their objectid. The objectid is a non-persistent ID assigned to an object when a design file is translated to the SVF or SVF2 format. This means that:  A design file must be translated to SVF or SVF2 before you can retrieve properties. The objectid of an object can change if the design is translated to SVF or SVF2 again. If you require a persistent ID to reference an object, use &#x60;externalId&#x60;.  **Note**: Before you call this endpoint:  Use the &#x60;GET {urn}/metadata&#x60; endpoint. Obtain the ID of the model view (Viewable) you want to check. Use the ID you obtained as the &#x60;modelGuid&#x60; URI parameter.  **Note**: &#x60;POST {urn}/metadata/{modelGuid}/properties:query&#x60; provides greater flexibility to retrieve only the properties you are interested in. What’s more the response is paginated. So, when the number of properties returned is large, it can getz you the results faster.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>
        /// <param name="modelGuid">Unique model view ID. Call GET {urn}/metadata to get the ID</param>
        /// <param name="acceptEncoding">A comma separated list of the algorthms you want the response to be encoded in, specified in the order of preference.    If you specify &#x60;&#x60;gzip&#x60;&#x60; or &#x60;&#x60;*&#x60;&#x60;, the service uses the GZIP algorithm to encode the response.  (optional)</param>/// <param name="xAdsForce">true: force retrieve the object tree even though it failed to be retrieved or got timeout (got 404 with error message) previously. false (default): retrieve the object tree, and previously failures are not replaced. (optional)</param>/// <param name="xAdsDerivativeFormat">Specifies what Object IDs to return, if the design has legacy SVF derivatives generated by the BIM Docs service. Possible values are:  - latest - (Default) Return SVF2 Object IDs. - fallback - Return SVF Object IDs.  Note  1. This parameter applies only to designs with legacy SVF derivatives generated by the BIM 360 Docs service. 2. The BIM 360 Docs service now generates SVF2 derivatives. SVF2 Object IDs may not be compatible with the SVF Object IDs previously generated by the BIM 360 Docs service. Setting this header to fallback may resolve backward compatibility issues resulting from Object IDs of legacy SVF derivatives being retained on the client side. 3. If you use this header with one derivative (URN), you must use it consistently across the following endpoints, whenever you reference the same derivative. - POST job (for OBJ output) - GET {urn}/metadata/{modelGuid} - GET {urn}/metadata/{modelGuid}/properties (optional)</param>/// <param name="objectid">he Object ID of the object you want to query properties for.  If objectid is omitted, the server returns properties for all objects. (optional)</param>/// <param name="forceget">true: Forcibly gets large resources even if they exceed the expected maximum size (20 MB). If the resource is larger than 800 MB, the server behaves as though forceget is false. In such a case, use the objectid query string parameter to download resources by Object ID one object at a time. Alternatively, you can use POST {urn}/metadata/{modelGuid}/properties:query to fetch only the properties you are interested in. false: (Default) Does not get resources if they exceed the expected maximum size (20 MB). (optional)</param>
        /// <returns>Task of ApiResponse&#60;AllProperties&#62;</returns>
        public async System.Threading.Tasks.Task<AllProperties> GetAllPropertiesAsync(string urn, string modelGuid, Region region = default, string acceptEncoding = default, bool xAdsForce = default, XAdsDerivativeFormat xAdsDerivativeFormat = default, int objectid = default, string forceget = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.MetadataApi.GetAllPropertiesAsync(urn, modelGuid, region, acceptEncoding, xAdsForce, xAdsDerivativeFormat, objectid, forceget, accessToken, throwOnError);
            if (response.HttpResponse.StatusCode == System.Net.HttpStatusCode.Accepted)
                return (new AllProperties() { IsProcessing = true });
            return response.Content;
        }

        /// <summary>
        /// Fetch Specific Properties
        /// </summary>
        /// <remarks>
        /// Queries the objects in the model view (Viewable) specified by the modelGuid URI parameter and returns the specified properties in a paginated list. You can limit the number of objects to be queried by specifying a filter in the request body.  Before you call this endpoint use the &#x60;GET {urn}/metadata endpoint&#x60;, to obtain the IDs of the model views (Viewables) contained in the design. After that, specify the ID of the model view you want to query as the &#x60;modelGuid&#x60; URI parameter.  **Note**: Before you query a model view for properties, the design must be translated to SVF or SVF2.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="urn">The Base64 (URL Safe) encoded design URN</param>
        /// <param name="modelGuid">Unique model view ID. Call GET {urn}/metadata to get the ID</param>
        /// <param name="acceptEncoding">A comma separated list of the algorthms you want the response to be encoded in, specified in the order of preference.    If you specify &#x60;&#x60;gzip&#x60;&#x60; or &#x60;&#x60;*&#x60;&#x60;, the service uses the GZIP algorithm to encode the response.  (optional)</param>/// <param name="specificPropertiesPayload"> (optional)</param>
        /// <returns>Task of ApiResponse&#60;SpecificProperties&#62;</returns>
        public async System.Threading.Tasks.Task<SpecificProperties> FetchSpecificPropertiesAsync(string urn, string modelGuid, Region region = default, string acceptEncoding = default, SpecificPropertiesPayload specificPropertiesPayload = default, string accessToken = null, bool throwOnError = true)
        {
            var response = await this.MetadataApi.FetchSpecificPropertiesAsync(urn, modelGuid,  region, acceptEncoding, specificPropertiesPayload, accessToken, throwOnError);
            if (response.HttpResponse.StatusCode == System.Net.HttpStatusCode.Accepted)
                return (new SpecificProperties() { IsProcessing = true });
            return response.Content;
        }

        #endregion MetaData
    }
}